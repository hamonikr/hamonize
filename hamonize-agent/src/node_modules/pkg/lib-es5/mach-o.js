"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.patchMachOExecutable = void 0;
function parseCStr(buf) {
    for (var i = 0; i < buf.length; i += 1) {
        if (buf[i] === 0) {
            return buf.slice(0, i).toString();
        }
    }
}
function patchCommand(type, buf, file) {
    // segment_64
    if (type === 0x19) {
        var name_1 = parseCStr(buf.slice(0, 16));
        if (name_1 === '__LINKEDIT') {
            var fileoff = buf.readBigUInt64LE(32);
            var vmsize_patched = BigInt(file.length) - fileoff;
            var filesize_patched = vmsize_patched;
            buf.writeBigUInt64LE(vmsize_patched, 24);
            buf.writeBigUInt64LE(filesize_patched, 40);
        }
    }
    // symtab
    if (type === 0x2) {
        var stroff = buf.readUInt32LE(8);
        var strsize_patched = file.length - stroff;
        buf.writeUInt32LE(strsize_patched, 12);
    }
}
function patchMachOExecutable(file) {
    var align = 8;
    var hsize = 32;
    var ncmds = file.readUInt32LE(16);
    var buf = file.slice(hsize);
    for (var offset = 0, i = 0; i < ncmds; i += 1) {
        var type = buf.readUInt32LE(offset);
        offset += 4;
        var size = buf.readUInt32LE(offset) - 8;
        offset += 4;
        patchCommand(type, buf.slice(offset, offset + size), file);
        offset += size;
        if (offset & align) {
            offset += align - (offset & align);
        }
    }
    return file;
}
exports.patchMachOExecutable = patchMachOExecutable;
//# sourceMappingURL=mach-o.js.map